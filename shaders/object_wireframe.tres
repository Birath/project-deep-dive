[gd_resource type="ShaderMaterial" load_steps=30 format=2]

[sub_resource type="VisualShaderNodeCompare" id=1]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, 1e-05 ]
type = 1
function = 5

[sub_resource type="VisualShaderNodeVectorOp" id=2]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "width"

[sub_resource type="VisualShaderNodeVectorCompose" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=6]
default_input_values = [ 0, 0.0, 1, 0.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeColorUniform" id=7]
uniform_name = "wire_color"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTransformVecMult" id=11]

[sub_resource type="VisualShaderNodeVec3Uniform" id=12]
uniform_name = "ping"

[sub_resource type="VisualShaderNodeVectorLen" id=13]

[sub_resource type="VisualShaderNodeVectorOp" id=14]
operator = 1

[sub_resource type="VisualShaderNodeSwitch" id=15]

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "max_distance"

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 0.25 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=21]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 5.0 ]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=23]
size = Vector2( 909, 418 )
expression = "intensity = fade_distance(dist, max_dist, 3)"

[sub_resource type="VisualShaderNodeScalarConstant" id=24]
constant = 1.0

[sub_resource type="VisualShaderNodeGlobalExpression" id=25]
size = Vector2( 1313.71, 262.784 )
expression = "float fade_distance(float dist, float max_dist, float slope) {
	return clamp((max_dist - dist) / slope, 0, 1);
}"

[sub_resource type="VisualShaderNodeScalarOp" id=26]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=27]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeCompare" id=28]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, 0 ), 2, 1e-05 ]
type = 1
function = 3

[sub_resource type="VisualShader" id=29]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform float width;
uniform vec4 wire_color : hint_color;
uniform vec3 ping;
uniform float max_distance;


// GlobalExpression:0
	float fade_distance(float dist, float max_dist, float slope) {
		return clamp((max_dist - dist) / slope, 0, 1);
	}

void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// ScalarUniform:15
	float n_out15p0 = width;

// ScalarOp:17
	float n_in17p0 = 1.00000;
	float n_out17p0 = n_in17p0 - n_out15p0;

// VectorCompose:18
	float n_in18p2 = 1.00000;
	vec3 n_out18p0 = vec3(n_out17p0, n_out17p0, n_in18p2);

// Compare:10
	bool n_out10p0;
	{
		bvec3 _bv = lessThanEqual(n_out2p0, n_out18p0);
		n_out10p0 = all(_bv);
	}

// VectorCompose:16
	float n_in16p2 = 0.00000;
	vec3 n_out16p0 = vec3(n_out15p0, n_out15p0, n_in16p2);

// Compare:9
	bool n_out9p0;
	{
		bvec3 _bv = greaterThanEqual(n_out2p0, n_out16p0);
		n_out9p0 = all(_bv);
	}

// VectorOp:12
	vec3 n_out12p0 = vec3(n_out10p0 ? 1.0 : 0.0) * vec3(n_out9p0 ? 1.0 : 0.0);

// Color:7
	vec3 n_out7p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out7p1 = 1.000000;

// ColorUniform:19
	vec3 n_out19p0 = wire_color.rgb;
	float n_out19p1 = wire_color.a;

// VectorSwitch:3
	vec3 n_out3p0;
	if(all(bvec3(n_out12p0)))
	{
		n_out3p0 = n_out7p0;
	}
	else
	{
		n_out3p0 = n_out19p0;
	}

// Input:20
	mat4 n_out20p0 = CAMERA_MATRIX;

// Input:22
	vec3 n_out22p0 = VERTEX;

// TransformVectorMult:23
	vec3 n_out23p0 = (n_out20p0 * vec4(n_out22p0, 1.0)).xyz;

// VectorUniform:24
	vec3 n_out24p0 = ping;

// VectorOp:26
	vec3 n_out26p0 = n_out23p0 - n_out24p0;

// VectorLen:25
	float n_out25p0 = length(n_out26p0);

// ScalarUniform:32
	float n_out32p0 = max_distance;

// Expression:40
	float n_out40p0;
	n_out40p0 = 0.0;
	{
		n_out40p0 = fade_distance(n_out25p0, n_out32p0, 3)
	}

// Input:33
	float n_out33p0 = TIME;

// ScalarOp:39
	float n_in39p1 = 5.00000;
	float n_out39p0 = n_out33p0 * n_in39p1;

// ScalarFunc:34
	float n_out34p0 = sin(n_out39p0);

// ScalarOp:36
	float n_in36p1 = 0.25000;
	float n_out36p0 = n_out34p0 * n_in36p1;

// ScalarOp:35
	float n_in35p1 = 0.50000;
	float n_out35p0 = n_out36p0 + n_in35p1;

// ScalarOp:44
	float n_out44p0 = n_out40p0 * n_out35p0;

// VectorOp:38
	vec3 n_out38p0 = n_out3p0 * vec3(n_out44p0);

// Output:0
	ALBEDO = n_out38p0;

}

void light() {
// Output:0

}
"
flags/unshaded = true
nodes/fragment/0/position = Vector2( 680, 360 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -2100, -440 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -600, 380 )
nodes/fragment/7/node = SubResource( 27 )
nodes/fragment/7/position = Vector2( -1040, 380 )
nodes/fragment/9/node = SubResource( 28 )
nodes/fragment/9/position = Vector2( -1760, 40 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1760, -300 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -1320, -300 )
nodes/fragment/15/node = SubResource( 3 )
nodes/fragment/15/position = Vector2( -2540, -80 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( -2180, -80 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( -2540, -300 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( -2180, -300 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( -1040, 560 )
nodes/fragment/20/node = SubResource( 9 )
nodes/fragment/20/position = Vector2( -2680, 880 )
nodes/fragment/22/node = SubResource( 10 )
nodes/fragment/22/position = Vector2( -2680, 1040 )
nodes/fragment/23/node = SubResource( 11 )
nodes/fragment/23/position = Vector2( -2320, 880 )
nodes/fragment/24/node = SubResource( 12 )
nodes/fragment/24/position = Vector2( -2220, 1100 )
nodes/fragment/25/node = SubResource( 13 )
nodes/fragment/25/position = Vector2( -1520, 880 )
nodes/fragment/26/node = SubResource( 14 )
nodes/fragment/26/position = Vector2( -1860, 880 )
nodes/fragment/32/node = SubResource( 16 )
nodes/fragment/32/position = Vector2( -1820, 1100 )
nodes/fragment/33/node = SubResource( 17 )
nodes/fragment/33/position = Vector2( -1900, 1540 )
nodes/fragment/34/node = SubResource( 18 )
nodes/fragment/34/position = Vector2( -1180, 1540 )
nodes/fragment/35/node = SubResource( 19 )
nodes/fragment/35/position = Vector2( -380, 1540 )
nodes/fragment/36/node = SubResource( 20 )
nodes/fragment/36/position = Vector2( -740, 1540 )
nodes/fragment/38/node = SubResource( 21 )
nodes/fragment/38/position = Vector2( 300, 360 )
nodes/fragment/39/node = SubResource( 22 )
nodes/fragment/39/position = Vector2( -1540, 1540 )
nodes/fragment/40/node = SubResource( 23 )
nodes/fragment/40/position = Vector2( -1160, 860 )
nodes/fragment/40/size = Vector2( 909, 418 )
nodes/fragment/40/input_ports = "0,0,dist;1,0,max_dist;"
nodes/fragment/40/output_ports = "0,0,intensity;"
nodes/fragment/40/expression = "intensity = fade_distance(dist, max_dist, 3)"
nodes/fragment/42/node = SubResource( 24 )
nodes/fragment/42/position = Vector2( -540, 660 )
nodes/fragment/43/node = SubResource( 25 )
nodes/fragment/43/position = Vector2( 1200, 360 )
nodes/fragment/43/size = Vector2( 1313.71, 262.784 )
nodes/fragment/43/input_ports = ""
nodes/fragment/43/output_ports = ""
nodes/fragment/43/expression = "float fade_distance(float dist, float max_dist, float slope) {
	return clamp((max_dist - dist) / slope, 0, 1);
}"
nodes/fragment/44/node = SubResource( 26 )
nodes/fragment/44/position = Vector2( -40, 860 )
nodes/fragment/connections = PoolIntArray( 10, 0, 12, 0, 9, 0, 12, 1, 12, 0, 3, 0, 15, 0, 16, 0, 16, 0, 9, 1, 15, 0, 16, 1, 15, 0, 17, 1, 17, 0, 18, 0, 17, 0, 18, 1, 18, 0, 10, 1, 19, 0, 3, 2, 7, 0, 3, 1, 2, 0, 10, 0, 2, 0, 9, 0, 20, 0, 23, 0, 22, 0, 23, 1, 23, 0, 26, 0, 24, 0, 26, 1, 26, 0, 25, 0, 36, 0, 35, 0, 38, 0, 0, 0, 33, 0, 39, 0, 34, 0, 36, 0, 39, 0, 34, 0, 32, 0, 40, 1, 25, 0, 40, 0, 40, 0, 44, 0, 35, 0, 44, 1, 44, 0, 38, 1, 3, 0, 38, 0 )
nodes/light/0/position = Vector2( 400, 160 )

[resource]
shader = SubResource( 29 )
shader_param/width = 0.05
shader_param/wire_color = Color( 1, 0, 0, 1 )
shader_param/ping = Vector3( 0, 0, 0 )
shader_param/max_distance = 25.0
